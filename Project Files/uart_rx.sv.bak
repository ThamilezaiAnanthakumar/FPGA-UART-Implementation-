module uart_rx #(
  parameter CLOCKS_PER_PULSE = 4,  // For simulation, normally ~5208 for 9600 baud at 200MHz
            BITS_PER_WORD    = 8,
            W_OUT            = 24                          // Total data output width
)(
  input  logic clk,
  input  logic rstn,
  input  logic rx,
  output logic m_valid,
  output logic [W_OUT-1:0] m_data
);

  localparam PACKET_SIZE = BITS_PER_WORD + 5;             // 1 start + data + 2 stop
  localparam NUM_WORDS   = W_OUT / BITS_PER_WORD;

  // Internal counters
  logic [$clog2(CLOCKS_PER_PULSE)-1:0] c_clocks;
  logic [$clog2(PACKET_SIZE)-1:0]      c_bits;
  logic [$clog2(NUM_WORDS)-1:0]        c_words;

  // Shift register
  logic [BITS_PER_WORD-1:0] word_buf;

  // FSM
  typedef enum logic [1:0] {IDLE, START, DATA, END} state_t;
  state_t state;

  always_ff @(posedge clk or negedge rstn) begin
    if (!rstn) begin
      state     <= IDLE;
      c_clocks  <= 0;
      c_bits    <= 0;
      c_words   <= 0;
      m_data    <= 0;
      m_valid   <= 0;
    end else begin
      m_valid <= 0;

      case (state)
        // Wait for falling edge (start bit)
        IDLE: begin
          if (rx == 0) begin
            c_clocks <= 0;
            state    <= START;
          end
        end

        // Sample in the middle of the start bit
        START: begin
          if (c_clocks == CLOCKS_PER_PULSE / 2 - 1) begin
            c_clocks <= 0;
            c_bits   <= 0;
            word_buf <= 0;
            state    <= DATA;
          end else begin
            c_clocks <= c_clocks + 1;
          end
        end

        // Sample each data bit
        DATA: begin
          if (c_clocks == CLOCKS_PER_PULSE - 1) begin
            c_clocks <= 0;

            word_buf <= {rx, word_buf[BITS_PER_WORD-1:1]};  // Shift in LSB first
            if (c_bits == BITS_PER_WORD - 1) begin
              // Store word and update counters
              c_bits <= 0;
              m_data <= {word_buf, m_data[W_OUT-1:BITS_PER_WORD]};
              
              if (c_words == NUM_WORDS - 1) begin
                c_words <= 0;
                state   <= END;
              end else begin
                c_words <= c_words + 1;
              end
            end else begin
              c_bits <= c_bits + 1;
            end
          end else begin
            c_clocks <= c_clocks + 1;
          end
        end

        // Wait one stop bit time (can be extended for 2 bits)
        END: begin
          if (c_clocks == CLOCKS_PER_PULSE - 1) begin
            c_clocks <= 0;
            m_valid  <= 1;
            state    <= IDLE;
          end else begin
            c_clocks <= c_clocks + 1;
          end
        end
      endcase
    end
  end

endmodule
